Index: flaskr/training.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from keras.models import Sequential, load_model\nfrom keras.layers import Dense, LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n# import matplotlib.pyplot as plt\nimport numpy as np\nimport math\nfrom pathlib import Path\n\n\nclass LSTMPrediction:\n    training_percent = 0.65\n\n    def __init__(self, data):\n        # Scale data to LSTM-friendly 0-1 range\n        self.scaler = MinMaxScaler(feature_range=(0, 1))\n        self.data = self.scaler.fit_transform(np.array(data.iloc[:, [1]]).reshape(-1, 1))\n\n    def get_train_test_data(self):\n        training_size = int(len(self.data) * self.training_percent)\n        training_data = self.data[:training_size]\n        test_data = self.data[training_size:]\n        return training_data, test_data\n\n    def get_xy_data(self, dataset, look_back=1):\n        x_data = []\n        y_data = []\n        for i in range(len(dataset) - look_back - 1):\n            x = dataset[i:(i + look_back), 0]\n            x_data.append(x)\n            y_data.append(dataset[(i + look_back), 0])\n        return np.array(x_data), np.array(y_data)\n\n    def prepare_model(self, look_back, *, x_train, y_train, x_test, y_test, save=False, save_path='', save_name=''):\n        # If already has model\n        if save and Path(save_path + save_name).exists():\n            print(f'Model exists: \\'{save_path}{save_name}\\'')\n            model = load_model(save_path + save_name)\n\n        else:\n            print('Model does not exist. Training model now...')\n            model = Sequential()\n            model.add(LSTM(50, return_sequences=True, input_shape=(look_back, 1)))\n            model.add(LSTM(50, return_sequences=True))\n            model.add(LSTM(50))\n            model.add(Dense(1))\n            model.compile(loss='mean_squared_error', optimizer='adam')\n            model.fit(\n                x_train,\n                y_train,\n                validation_data=(x_test, y_test),\n                epochs=8,           # Training iterations\n                # batch_size=64,      # Number of batch per epoch\n                verbose=1,\n                # use_multiprocessing=True,\n            )\n\n        # Save model\n        if save and not Path(save_path + save_name).exists():\n            print(f'Saving model to \\'{save_path + save_name}\\'')\n            Path(save_path).mkdir(parents=True, exist_ok=True)\n            model.save(save_path + save_name, overwrite=True)\n\n        return model\n\n    # def plot_prediction(self, train_predict, test_predict):\n    #     # Shift train predictions for plotting\n    #     look_back = 100\n    #     train_predict_plot = np.empty_like(self.data)\n    #     train_predict_plot[:, :] = np.nan\n    #     train_predict_plot[look_back:len(train_predict) + look_back, :] = train_predict\n    #\n    #     # Shift test predictions for plotting\n    #     test_predict_plot = np.empty_like(self.data)\n    #     test_predict_plot[:, :] = np.nan\n    #     test_predict_plot[len(train_predict) + (look_back*2) + 1:len(self.data) - 1, :] = test_predict\n    #\n    #     # Plot baseline and predictions\n    #     plt.plot(self.scaler.inverse_transform(self.data))\n    #     plt.plot(train_predict_plot)\n    #     plt.plot(test_predict_plot)\n\n    def reshape(self):\n        training_data, test_data = self.get_train_test_data()\n        look_back = 100\n        x_train, y_train = self.get_xy_data(training_data, look_back)\n        x_test, y_test = self.get_xy_data(test_data, look_back)\n\n        x_train = x_train.reshape(x_train.shape[0], x_train.shape[1])\n        x_test = x_test.reshape(x_test.shape[0], x_test.shape[1])\n\n        return look_back, x_train, x_test, y_train, y_test, test_data\n\n    def train(self, model, *, x_train, x_test, y_train, y_test):\n        train_predict = model.predict(x_train)\n        test_predict = model.predict(x_test)\n\n        train_predict = self.scaler.inverse_transform(train_predict)\n        test_predict = self.scaler.inverse_transform(test_predict)\n\n        math.sqrt(mean_squared_error(y_train, train_predict))\n        math.sqrt(mean_squared_error(y_test, test_predict))\n\n    def predict(self, *, days, model, test_data):\n        x_input = test_data[-100:].reshape(1, -1)\n        temp_input = list(x_input)[0].tolist()\n        lst_output = []\n        n_steps = 100\n        i = 0\n\n        while i < days:\n            if len(temp_input) > 100:\n                x_input = np.array(temp_input[1:])\n                x_input = x_input.reshape(1, -1)\n                x_input = x_input.reshape((1, n_steps, 1))\n                yhat = model.predict(x_input, verbose=0)\n                temp_input.extend(yhat[0].tolist())\n                temp_input = temp_input[1:]\n                lst_output.extend(yhat.tolist())\n            else:\n                x_input = x_input.reshape((1, n_steps, 1))\n                yhat = model.predict(x_input, verbose=0)\n                temp_input.extend(yhat[0].tolist())\n                lst_output.extend(yhat.tolist())\n\n            i = i + 1\n\n        # day_new = np.arange(1, 101)\n        # day_prediction = np.arange(101, 101 + days)\n        df3 = self.data.tolist()\n        df3.extend(lst_output)\n        # data_inversed = self.scaler.inverse_transform((self.data[-100:]))\n        predicted_data_inversed = self.scaler.inverse_transform(lst_output)\n        # plt.plot(day_new, data_inversed)\n        # plt.plot(day_prediction, predicted_data_inversed)\n\n        print('Prediction done!')\n\n        return predicted_data_inversed\n\n    def start(self, *, days, save=False, save_path='', save_name=''):\n        look_back, x_train, x_test, y_train, y_test, test_data = self.reshape()\n        model = self.prepare_model(\n            look_back,\n            x_train=x_train,\n            x_test=x_test,\n            y_train=y_train,\n            y_test=y_test,\n            save=save,\n            save_path=save_path,\n            save_name=save_name,\n        )\n        self.train(\n            model,\n            x_train=x_train,\n            x_test=x_test,\n            y_train=y_train,\n            y_test=y_test,\n        )\n        predicted_data = self.predict(days=days, model=model, test_data=test_data)\n\n        # Create path if not exists\n        # Path(fig_dir).mkdir(parents=True, exist_ok=True)\n        # plt.savefig(fig_dir + fig_name)\n        # plt.clf()\n\n        return predicted_data\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flaskr/training.py b/flaskr/training.py
--- a/flaskr/training.py	(revision e071175f50b45c37ada102c0fcc54a62b81c6088)
+++ b/flaskr/training.py	(date 1658988092143)
@@ -49,8 +49,8 @@
                 x_train,
                 y_train,
                 validation_data=(x_test, y_test),
-                epochs=8,           # Training iterations
-                # batch_size=64,      # Number of batch per epoch
+                epochs=100,           # Training iterations
+                batch_size=64,      # Number of batch per epoch
                 verbose=1,
                 # use_multiprocessing=True,
             )
Index: flaskr/templates/stock.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'base.html' %}\n\n{% set title = company_symbol + ' stock history' %}\n\n{% block navbar %}\n  {% include 'navbar.html' %}\n{% endblock %}\n\n{% block content %}\n  <div class=\"container\">\n    <h1 class=\"bg-secondary p-2 text-white\">{{ company }}<br>({{ company_symbol }})</h1>\n    <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n      <a href=\"{{ url_for('.forecast', symbol=company_symbol, stock_type='Open') }}\" id=\"forecast_open\" class=\"btn btn-success\">Forecast Open</a>\n      <a href=\"{{ url_for('.forecast', symbol=company_symbol, stock_type='High') }}\" id=\"forecast_high\" class=\"btn btn-success\">Forecast High</a>\n      <a href=\"{{ url_for('.forecast', symbol=company_symbol, stock_type='Low') }}\" id=\"forecast_low\" class=\"btn btn-success\">Forecast Low</a>\n      <a href=\"{{ url_for('.forecast', symbol=company_symbol, stock_type='Close') }}\" id=\"forecast_close\" class=\"btn btn-success\">Forecast Close</a>\n    </div>\n    <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n      <a href=\"{{ url_for('.accuracy', symbol=company_symbol, stock_type='Open') }}\" id=\"accuracy_open\" class=\"btn btn-primary\">View Open accuracy</a>\n      <a href=\"{{ url_for('.accuracy', symbol=company_symbol, stock_type='High') }}\" id=\"accuracy_high\" class=\"btn btn-primary\">View High accuracy</a>\n      <a href=\"{{ url_for('.accuracy', symbol=company_symbol, stock_type='Low') }}\" id=\"accuracy_low\" class=\"btn btn-primary\">View Low accuracy</a>\n      <a href=\"{{ url_for('.accuracy', symbol=company_symbol, stock_type='Close') }}\" id=\"accuracy_close\" class=\"btn btn-primary\">View Close accuracy</a>\n    </div>\n    <h2>Historical data</h2>\n    <div id=\"chartcontainer\"></div>\n  </div>\n  {% if compare_company is defined %}\n    <div class=\"container\">\n      <h1 class=\"bg-secondary p-2 text-white\">{{ compare_company }}<br>({{ compare_company_symbol }})</h1>\n      <h2>Historical data</h2>\n      <div id=\"comparechartcontainer\"></div>\n    </div>\n  {% endif %}\n  <div class=\"row m-3\">\n    <button class=\"btn btn-primary\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapse-table\" aria-expanded=\"false\" aria-controls=\"collapse-table\">\n      Show data table\n    </button>\n  </div>\n  <div class=\"container collapse mb-3\" id=\"collapse-table\">\n{#    <h1 class=\"bg-secondary p-2 text-white\">{{ company }}<br>Table format data</h1>#}\n    <div class=\"table-responsive\" style=\"max-height: 300px;\">\n      {{ table | safe }}\n    </div>\n  </div>\n  <h2>News</h2>\n  <div class=\"container\">\n    <table class=\"table table-striped table-hover table-bordered\">\n      <tr>\n        <th>Time</th>\n        <th>Headline</th>\n      </tr>\n    {% for article in news %}\n      <tr>\n        <td>{{ article.providerPublishTime }}</td>\n        <td><a href=\"{{ article.link }}\">{{ article.title }}</a><br></td>\n      </tr>\n    {% endfor %}\n    </table>\n  </div>\n  <script>\n    var data = {{ data|safe }};\n\n    {# If comparison data is present #}\n    {% if compare_data is defined %}\n      var compareData = {{ compare_data|safe }};\n\n      // Do graph here\n      console.log('compareData = ' + JSON.stringify(compareData));\n      // split the data set into ohlc and volume\n    var ohlc2 = [];\n    var volume2 = [];\n    var companySymbol2 = '{{ company_symbol }}';\n\n    function getData2() {\n        for (var j in compareData.Time) {\n            ohlc2.push([\n                compareData.Time[j], // the date\n                compareData.Open[j], // open\n                compareData.High[j], // high\n                compareData.Low[j],  // low\n                compareData.Close[j] // close\n            ]);\n\n            volume2.push([\n                compareData.Time[j],   // the date\n                compareData.Volume[j]  // the volume\n            ]);\n        }\n/*\n        console.log(ohlc);\n        console.log(volume);\n */\n        // console.log(JSON.stringify(ohlc));\n        // console.log(JSON.stringify(volume));\n\n    }\n\n    function plotCharts2() {\n        Highcharts.stockChart('comparechartcontainer', {\n            yAxis: [{\n                labels: {\n                    align: 'left'\n                },\n                height: '80%',\n                resize: {\n                    enabled: true\n                }\n            }, {\n                labels: {\n                    align: 'left'\n                },\n                top: '80%',\n                height: '20%',\n                offset: 0\n            }],\n            tooltip: {\n                shape: 'square',\n                headerShape: 'callout',\n                borderWidth: 0,\n                shadow: false,\n                positioner: function (width, height, point) {\n                    var chart = this.chart,\n                        position;\n\n                    if (point.isHeader) {\n                        position = {\n                            x: Math.max(\n                                // Left side limit\n                                chart.plotLeft,\n                                Math.min(\n                                    point.plotX + chart.plotLeft - width / 2,\n                                    // Right side limit\n                                    chart.chartWidth - width - chart.marginRight\n                                )\n                            ),\n                            y: point.plotY\n                        };\n                    } else {\n                        position = {\n                            x: point.series.chart.plotLeft,\n                            y: point.series.yAxis.top - chart.plotTop\n                        };\n                    }\n\n                    return position;\n                }\n            },\n            stockTools: {\n              gui: {\n                  enabled: false\n              }\n            },\n            series: [{\n                type: 'ohlc',\n                id: companySymbol2 + '-ohlc',\n                name: companySymbol2 + ' Stock Price',\n                data: ohlc2,\n                dataGrouping: {\n                    enabled: false\n                }\n            }, {\n                type: 'column',\n                id: companySymbol2 + '-volume',\n                name: companySymbol2 + ' Stock Volume',\n                data: volume2,\n                yAxis: 1,\n                dataGrouping: {\n                    enabled: false\n                }\n            }],\n            responsive: {\n                rules: [{\n                    condition: {\n                        maxWidth: 800\n                    },\n                    chartOptions: {\n                        rangeSelector: {\n                            inputEnabled: false\n                        }\n                    }\n                }]\n            }\n        });\n    }\n    $( document ).ready(function()\n    {\n        getData2();\n        plotCharts2();\n    });\n\n    {% endif %}\n\n    // split the data set into ohlc and volume\n    var ohlc = [];\n    var volume = [];\n    var companySymbol = '{{ company_symbol }}';\n\n    function getData() {\n        for (var j in data.Time) {\n            ohlc.push([\n                data.Time[j], // the date\n                data.Open[j], // open\n                data.High[j], // high\n                data.Low[j],  // low\n                data.Close[j] // close\n            ]);\n\n            volume.push([\n                data.Time[j],   // the date\n                data.Volume[j]  // the volume\n            ]);\n        }\n/*\n        console.log(ohlc);\n        console.log(volume);\n */\n        // console.log(JSON.stringify(ohlc));\n        // console.log(JSON.stringify(volume));\n\n    }\n\n    function plotCharts() {\n        Highcharts.stockChart('chartcontainer', {\n            yAxis: [{\n                labels: {\n                    align: 'left'\n                },\n                height: '80%',\n                resize: {\n                    enabled: true\n                }\n            }, {\n                labels: {\n                    align: 'left'\n                },\n                top: '80%',\n                height: '20%',\n                offset: 0\n            }],\n            tooltip: {\n                shape: 'square',\n                headerShape: 'callout',\n                borderWidth: 0,\n                shadow: false,\n                positioner: function (width, height, point) {\n                    var chart = this.chart,\n                        position;\n\n                    if (point.isHeader) {\n                        position = {\n                            x: Math.max(\n                                // Left side limit\n                                chart.plotLeft,\n                                Math.min(\n                                    point.plotX + chart.plotLeft - width / 2,\n                                    // Right side limit\n                                    chart.chartWidth - width - chart.marginRight\n                                )\n                            ),\n                            y: point.plotY\n                        };\n                    } else {\n                        position = {\n                            x: point.series.chart.plotLeft,\n                            y: point.series.yAxis.top - chart.plotTop\n                        };\n                    }\n\n                    return position;\n                }\n            },\n            stockTools: {\n              gui: {\n                  enabled: false\n              }\n            },\n            series: [{\n                type: 'ohlc',\n                id: companySymbol + '-ohlc',\n                name: companySymbol + ' Stock Price',\n                data: ohlc,\n                dataGrouping: {\n                    enabled: false\n                }\n            }, {\n                type: 'column',\n                id: companySymbol + '-volume',\n                name: companySymbol + ' Stock Volume',\n                data: volume,\n                yAxis: 1,\n                dataGrouping: {\n                    enabled: false\n                }\n            }],\n            responsive: {\n                rules: [{\n                    condition: {\n                        maxWidth: 800\n                    },\n                    chartOptions: {\n                        rangeSelector: {\n                            inputEnabled: false\n                        }\n                    }\n                }]\n            }\n        });\n    }\n\n    $( document ).ready(function()\n    {\n        getData();\n        plotCharts();\n    });\n\n  </script>\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flaskr/templates/stock.html b/flaskr/templates/stock.html
--- a/flaskr/templates/stock.html	(revision e071175f50b45c37ada102c0fcc54a62b81c6088)
+++ b/flaskr/templates/stock.html	(date 1658953144877)
@@ -7,8 +7,13 @@
 {% endblock %}
 
 {% block content %}
+  {# TODO: Create template for stock contents #}
   <div class="container">
-    <h1 class="bg-secondary p-2 text-white">{{ company }}<br>({{ company_symbol }})</h1>
+    <h1 class="bg-secondary p-2 text-white">
+      {% if company %}
+        {{ company }}<br>
+      {% endif %}
+      ({{ company_symbol }})</h1>
     <div class="btn-group" role="group" aria-label="Basic example">
       <a href="{{ url_for('.forecast', symbol=company_symbol, stock_type='Open') }}" id="forecast_open" class="btn btn-success">Forecast Open</a>
       <a href="{{ url_for('.forecast', symbol=company_symbol, stock_type='High') }}" id="forecast_high" class="btn btn-success">Forecast High</a>
@@ -26,7 +31,11 @@
   </div>
   {% if compare_company is defined %}
     <div class="container">
-      <h1 class="bg-secondary p-2 text-white">{{ compare_company }}<br>({{ compare_company_symbol }})</h1>
+      <h1 class="bg-secondary p-2 text-white">
+        {% if compare_company %}
+          {{ compare_company }}<br>
+        {% endif %}
+        ({{ compare_company_symbol }})</h1>
       <h2>Historical data</h2>
       <div id="comparechartcontainer"></div>
     </div>
@@ -43,20 +52,24 @@
     </div>
   </div>
   <h2>News</h2>
-  <div class="container">
-    <table class="table table-striped table-hover table-bordered">
-      <tr>
-        <th>Time</th>
-        <th>Headline</th>
-      </tr>
-    {% for article in news %}
-      <tr>
-        <td>{{ article.providerPublishTime }}</td>
-        <td><a href="{{ article.link }}">{{ article.title }}</a><br></td>
-      </tr>
-    {% endfor %}
-    </table>
-  </div>
+  {% if news %}
+    <div class="container">
+      <table class="table table-striped table-hover table-bordered">
+        <tr>
+          <th>Time</th>
+          <th>Headline</th>
+        </tr>
+      {% for article in news %}
+        <tr>
+          <td>{{ article.providerPublishTime }}</td>
+          <td><a href="{{ article.link }}">{{ article.title }}</a><br></td>
+        </tr>
+      {% endfor %}
+      </table>
+    </div>
+  {% else %}
+    {% include 'no_data.html' %}
+  {% endif %}
   <script>
     var data = {{ data|safe }};
 
Index: flaskr/templates/accuracy.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'base.html' %}\n\n{% set title = company_symbol + ' prediction accuracy (' + stock_type + ')' %}\n\n{% block navbar %}\n  {% include 'navbar.html' %}\n{% endblock %}\n\n{% block content %}\n  <h1 class=\"bg-secondary p-2 text-white\">{{ company }}</h1>\n  <h2>Accuracy ({{ stock_type }})</h2>\n  <div class=\"row m-3\">\n    <button class=\"btn btn-primary\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapse-table\" aria-expanded=\"false\" aria-controls=\"collapse-table\">\n      Show data table\n    </button>\n  </div>\n\n  <div class=\"container collapse mb-3\" id=\"collapse-table\">\n    {% if accuracy %}\n      <table class=\"table table-striped table-hover table-bordered\">\n        {# Headers #}\n        <tr>\n          {% for key in accuracy[0] %}\n          <th>\n            {{ key }}\n          </th>\n          {% endfor %}\n        </tr>\n        {# Loop through dict values #}\n        {% for index in accuracy.values() %}\n          <tr>\n            <td>\n              {{ index.Date.strftime('%Y %b %d') }}\n            </td>\n            <td>\n              {{ '%.4f' | format(index.Actual) }}\n            </td>\n            <td>\n              {{ '%.4f' | format(index.Predicted) }}\n            </td>\n            {# Change text colour based on positive/negative difference #}\n            <td class=\"\n              {% if index.Difference > 0 %}\n                text-success\n              {% elif index.Difference < 0 %}\n                text-warning\n              {% else %}\n                text-primary\n              {% endif %}\n            \">\n              {{ '%.4f' | format(index.Difference) }}\n            </td>\n          </tr>\n        {% endfor %}\n      </table>\n    {% else %}\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <p class=\"text-danger text-center\">No recorded data available!</p>\n        </div>\n      </div>\n    {% endif %}\n  </div>\n{% endblock %}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flaskr/templates/accuracy.html b/flaskr/templates/accuracy.html
--- a/flaskr/templates/accuracy.html	(revision e071175f50b45c37ada102c0fcc54a62b81c6088)
+++ b/flaskr/templates/accuracy.html	(date 1658952921642)
@@ -54,11 +54,7 @@
         {% endfor %}
       </table>
     {% else %}
-      <div class="card">
-        <div class="card-body">
-          <p class="text-danger text-center">No recorded data available!</p>
-        </div>
-      </div>
+      {% include 'no_data.html' %}
     {% endif %}
   </div>
 {% endblock %}
Index: flaskr/finance.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import yfinance as yf\nimport datetime\n\n\n# Get date of x years before\ndef get_default_start_date(years=None):\n    if years is None:\n        years = 3               # Default 10 years (3 for test)\n    date_now = datetime.datetime.now()\n    return date_now.replace(date_now.year - years)\n\n\nclass CompanyStock:\n    start_date = None\n    end_date = None\n\n    def __init__(self, company_stock_symbol, *, start_date=None, end_date=None):\n        self.company = yf.Ticker(company_stock_symbol)\n        if start_date is not None:\n            self.start_date = start_date\n        else:\n            self.start_date = get_default_start_date()\n        if end_date is not None:\n            self.end_date = end_date\n        else:\n            self.end_date = datetime.datetime.now()\n\n    def get_symbol(self):\n        return self.company.info.get('symbol')\n\n    def get_info(self, name):\n        return self.company.info.get(name)\n\n    def get_history(self, *, start_date=None, end_date=None, interval=None):\n        if start_date is None:\n            start_date = self.start_date\n\n        if end_date is None:\n            end_date = self.end_date\n\n        if interval is None:\n            interval = '1d'\n\n        history = self.company.history(start=start_date, end=end_date, interval=interval)\n        return history\n\n    def get_item(self, item, *, start_date=None, end_date=None):\n        if start_date is None:\n            start_date = self.start_date\n\n        if end_date is None:\n            end_date = self.end_date\n\n        history = self.get_history(start_date=start_date, end_date=end_date)\n        return history[[item]].reset_index()\n\n    def get_open(self, *, start_date=None, end_date=None):\n        return self.get_item('Open', start_date=start_date, end_date=end_date)\n\n    def get_high(self, *, start_date=None, end_date=None):\n        return self.get_item('High', start_date=start_date, end_date=end_date)\n\n    def get_low(self, *, start_date=None, end_date=None):\n        return self.get_item('Low', start_date=start_date, end_date=end_date)\n\n    def get_close(self, *, start_date=None, end_date=None):\n        return self.get_item('Close', start_date=start_date, end_date=end_date)\n\n    def get_dividends(self, *, start_date=None, end_date=None):\n        return self.get_item('Dividends', start_date=start_date, end_date=end_date)\n\n    def get_news(self):\n        return self.company.news\n\n    def set_start_date(self, start_date):\n        self.start_date = start_date\n\n    def set_end_date(self, end_date):\n        self.end_date = end_date\n\n    def __str__(self):\n        return f\"Name: {self.company.info['longName']}\\nSymbol: {self.company.info['symbol']}\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flaskr/finance.py b/flaskr/finance.py
--- a/flaskr/finance.py	(revision e071175f50b45c37ada102c0fcc54a62b81c6088)
+++ b/flaskr/finance.py	(date 1658987928590)
@@ -5,7 +5,7 @@
 # Get date of x years before
 def get_default_start_date(years=None):
     if years is None:
-        years = 3               # Default 10 years (3 for test)
+        years = 10               # Default 10 years (3 for test)
     date_now = datetime.datetime.now()
     return date_now.replace(date_now.year - years)
 
Index: flaskr/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Blueprint, request, render_template\nfrom flaskr.models import db, Search, PredictedTable, PredictedRow\nfrom .finance import CompanyStock\nfrom .training import LSTMPrediction\nimport pandas as pd\nimport datetime\nimport time\nfrom collections import Counter\nfrom sqlalchemy import Date\nfrom statistics import mean\nimport json\n\nviews = Blueprint('views', __name__)\n\nTABLE_RESPONSIVE_CLASS = ['table', 'table-striped', 'table-hover', 'table-bordered']\n\n\n# Home page\n@views.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'GET':\n        all_searches = [x.__dict__ for x in Search.query.all()]\n        # for search in top_searches:\n        #     search['time'] = datetime.datetime.fromtimestamp(search['time']).strftime('%d %b %Y %H:%M:%S')\n\n        # Count all search terms\n        count_searches = dict()\n        for search in all_searches:\n            count_searches[search['search_term'].upper()] = count_searches.get(search['search_term'].upper(), 0) + 1\n\n        # Get top 3 search terms\n        top_searches = Counter(count_searches).most_common(3)\n\n        return render_template('home.html', searches=top_searches)\n\n    # Get search symbol\n    search_symbol = request.form.get('search_symbol')\n    search = Search(time=time.time(), search_term=search_symbol)\n\n    # Get compare symbol\n    compare_symbol = request.form.get('compare_symbol')\n\n    db.session.add(search)\n    db.session.commit()\n    return stock(search_symbol, compare_symbol)\n\n\n# View stock page\n@views.route('/stock/stock=<string:symbol>')\n@views.route('/stock/stock=<string:symbol>&compare=<string:compare>')\ndef stock(symbol, compare=''):\n    company = CompanyStock(symbol)\n\n    # If company stock symbol does not exist\n    if company.get_symbol() is None:\n        return render_template('home.html', search_error='Error: Stock symbol does not exist.')\n\n    history = company.get_history().reset_index(level='Date')                       # Convert Date index to column\n    history['Time'] = history['Date']                                               # Create Time column\n    history['Date'] = pd.to_datetime(history['Date']).dt.strftime('%d %b %Y')       # Convert Timestamp to Datetime\n\n    # Get news and convert timestamp to datetime\n    news = company.get_news()\n    for article in news:\n        article['providerPublishTime'] = pd.to_datetime(article.get('providerPublishTime'), unit='s').strftime('%d %b %Y, %H:%M:%S')\n\n    if compare != '':\n        compare_company = CompanyStock(compare)\n        compare_history = compare_company.get_history().reset_index(level='Date')\n        compare_history['Time'] = compare_history['Date']\n        compare_history['Date'] = pd.to_datetime(compare_history['Date']).dt.strftime('%d %b %Y')       # Convert Timestamp to Datetime\n\n        return render_template(\n            'stock.html',\n            company_symbol=company.get_symbol(),\n            company=company.get_info('longName'),\n            table=history.loc[:, history.columns != 'Time'].to_html(classes=TABLE_RESPONSIVE_CLASS, justify='left'),        # Exclude 'Time' column\n            news=news,\n            data=history.to_json(),\n            compare_company_symbol=compare_company.get_symbol(),\n            compare_company=compare_company.get_info('longName'),\n            compare_data=compare_history.to_json(),\n        )\n\n    return render_template(\n        'stock.html',\n        company_symbol=company.get_symbol(),\n        company=company.get_info('longName'),\n        table=history.loc[:, history.columns != 'Time'].to_html(classes=TABLE_RESPONSIVE_CLASS, justify='left'),        # Exclude 'Time' column\n        news=news,\n        data=history.to_json(),\n    )\n\n\n# View accuracy page\n@views.route('/accuracy/<string:symbol>/<stock_type>')\ndef accuracy(symbol, stock_type):\n    company = CompanyStock(symbol)\n    data = company.get_item(stock_type)\n    ts = int(data['Date'].iloc[-1].timestamp())\n    session = db.session()\n\n    # Join (PredictedRow, PredictedTable), where symbol and time is earlier than today\n    predicted_history = session.query(\n        PredictedRow\n    ).join(\n        PredictedTable\n    ).filter(\n        PredictedTable.symbol == symbol\n    ).filter(\n        PredictedRow.time <= ts         # Filter future dates\n    ).all()\n\n    results_dict = dict()\n    diff_dict = dict()\n\n    for row in predicted_history:\n        predicted_date = datetime.datetime.fromtimestamp(row.time).strftime('%Y-%m-%d')\n        results_dict.setdefault(predicted_date, []).append(row.value)\n\n    for key, value in results_dict.items():\n        results_dict[key] = mean(value)\n        stock_value = data.loc[data['Date'] == key, stock_type].tolist()\n        if stock_value:\n            diff_dict[len(diff_dict)] = {\n                'Date': datetime.datetime.strptime(key, '%Y-%m-%d'),\n                'Actual': stock_value[0],\n                'Predicted': results_dict[key],\n                'Difference': stock_value[0] - results_dict[key],\n            }\n\n    date_today = datetime.datetime.now().strftime('%Y-%m-%d')\n\n    return render_template(\n        'accuracy.html',\n        company_symbol=symbol,\n        company=company.get_info('longName'),\n        stock_type=stock_type,\n        accuracy=diff_dict,\n    )\n\n\n# Forecast button\n@views.route('/forecast/<string:symbol>/<stock_type>')\ndef forecast(symbol, stock_type, days=None):\n    if days is None:\n        days = 30\n\n    time_now = time.time()\n    company = CompanyStock(symbol)\n    data = company.get_item(stock_type)\n    prediction = LSTMPrediction(data)\n\n    # Start prediction\n    # folder_name = 'flaskr/static/images/'\n    # graph_filename = f'{str(time_now)}_{symbol}_{stock_type}.png'           # Save time, symbol, and type\n    predicted_data = prediction.start(days=days, save=True, save_path='models/', save_name=symbol)      # Start prediction and save figure\n    predicted_data = [x[0] for x in predicted_data]\n\n    # Data conversion\n    last_date = data['Date'].iloc[-1]\n    predicted_dates = [(last_date + datetime.timedelta(days=x+1)) for x in range(days)]\n    predicted = pd.DataFrame(list(zip(predicted_dates, predicted_data)), columns=['Date', stock_type])\n    combined_data = pd.concat([data, predicted], ignore_index=True)                         # Combine data\n    combined_data['Date'] = pd.to_datetime(combined_data['Date']).dt.strftime('%d %b %Y')   # Convert Timestamp to Datetime\n\n    # Store data\n    predicted_table = PredictedTable(time=int(time.time()), symbol=symbol, stock_type=stock_type)\n    db.session.add(predicted_table)\n    db.session.flush()\n\n    predicted_rows = [PredictedRow(time=int(pd.to_datetime(row['Date']).timestamp()), value=row[stock_type], table_id=predicted_table.row_id) for _, row in predicted.iterrows()]\n    db.session.add_all(predicted_rows)\n    db.session.commit()\n\n    return render_template(\n        'forecast.html',\n        company_symbol=symbol,\n        company=company.get_info('longName'),\n        stock_type=stock_type,\n        table=combined_data.to_html(classes=TABLE_RESPONSIVE_CLASS, justify='left'),\n        # graph_filename='/images/' + graph_filename,\n        data=data.to_json(),\n        predicted=predicted.to_json()\n    )\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flaskr/views.py b/flaskr/views.py
--- a/flaskr/views.py	(revision e071175f50b45c37ada102c0fcc54a62b81c6088)
+++ b/flaskr/views.py	(date 1658986847814)
@@ -1,3 +1,5 @@
+#
+
 from flask import Blueprint, request, render_template
 from flaskr.models import db, Search, PredictedTable, PredictedRow
 from .finance import CompanyStock
@@ -68,7 +70,7 @@
         compare_company = CompanyStock(compare)
         compare_history = compare_company.get_history().reset_index(level='Date')
         compare_history['Time'] = compare_history['Date']
-        compare_history['Date'] = pd.to_datetime(compare_history['Date']).dt.strftime('%d %b %Y')       # Convert Timestamp to Datetime
+        compare_history['Date'] = pd.to_datetime(compare_history['Date']).dt.strftime('%d %b %Y')                           # Convert Timestamp to Datetime
 
         return render_template(
             'stock.html',
@@ -86,7 +88,7 @@
         'stock.html',
         company_symbol=company.get_symbol(),
         company=company.get_info('longName'),
-        table=history.loc[:, history.columns != 'Time'].to_html(classes=TABLE_RESPONSIVE_CLASS, justify='left'),        # Exclude 'Time' column
+        table=history.loc[:, history.columns != 'Time'].to_html(classes=TABLE_RESPONSIVE_CLASS, justify='left'),            # Exclude 'Time' column
         news=news,
         data=history.to_json(),
     )
Index: flaskr/templates/no_data.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flaskr/templates/no_data.html b/flaskr/templates/no_data.html
new file mode 100644
--- /dev/null	(date 1658953007968)
+++ b/flaskr/templates/no_data.html	(date 1658953007968)
@@ -0,0 +1,5 @@
+<div class="card mb-3">
+  <div class="card-body">
+    <p class="text-danger text-center">No data available!</p>
+  </div>
+</div>
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null	(date 1658985940291)
+++ b/README.md	(date 1658985940291)
@@ -0,0 +1,27 @@
+# Accustock - Final Year Project
+
+
+## Description
+
+Web application for predicting the stock market using historical data with linear time-series machine learning model
+Long Short-Term Memory (LSTM). Built using Flask framework, with machine learning library Tensorflow.
+
+
+## Features
+
+1. Search with stock symbol
+2. View live stock market information
+3. View related news
+4. View trending searches
+5. Predict future stocks of up to 30 days
+6. Compare stock prices of two companies
+7. Compare accuracy of prediction results
+
+
+## How to run
+
+1. Install Python 3.9
+2. Change directory to the project root directory
+3. Run commands in terminal:
+   1. ```pip install -r requirements.txt```
+   2. ```flask run```
\ No newline at end of file
